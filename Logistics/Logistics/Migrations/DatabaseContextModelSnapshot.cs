// <auto-generated />
using System;
using Logistics.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Logistics.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rc1-32029")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Logistics.Entities.AirExp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("JobID")
                        .IsRequired();

                    b.Property<Guid?>("carrierID");

                    b.Property<Guid?>("commodityId");

                    b.Property<DateTime>("created");

                    b.Property<DateTime>("eta");

                    b.Property<DateTime>("etd");

                    b.Property<string>("flightNumber");

                    b.Property<DateTime>("flyDate");

                    b.Property<bool>("isFinish");

                    b.Property<string>("mawbNumber");

                    b.Property<string>("notes")
                        .IsRequired();

                    b.Property<Guid?>("opicID");

                    b.Property<Guid?>("paymentID");

                    b.Property<int>("quantity");

                    b.Property<string>("service");

                    b.Property<Guid?>("shipmentID");

                    b.Property<Guid?>("typeOfBill");

                    b.Property<Guid?>("typeOfBillId");

                    b.Property<Guid?>("unitID");

                    b.HasKey("Id");

                    b.HasIndex("carrierID");

                    b.HasIndex("commodityId");

                    b.HasIndex("opicID");

                    b.HasIndex("paymentID");

                    b.HasIndex("shipmentID");

                    b.HasIndex("typeOfBill");

                    b.HasIndex("unitID");

                    b.ToTable("AirExps");
                });

            modelBuilder.Entity("Logistics.Entities.AirImp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CW");

                    b.Property<double>("GW");

                    b.Property<string>("Routing");

                    b.Property<string>("SCN");

                    b.Property<Guid?>("agentID")
                        .IsRequired();

                    b.Property<Guid?>("commodityId");

                    b.Property<DateTime>("created");

                    b.Property<DateTime>("eta");

                    b.Property<string>("flightNumber");

                    b.Property<bool>("isFinish");

                    b.Property<string>("jobID")
                        .IsRequired();

                    b.Property<string>("mawbNumber");

                    b.Property<string>("notes");

                    b.Property<Guid?>("opicID");

                    b.Property<int>("quantity");

                    b.Property<string>("service");

                    b.Property<Guid?>("shipmentID");

                    b.Property<Guid?>("unitID");

                    b.HasKey("Id");

                    b.HasIndex("agentID");

                    b.HasIndex("commodityId");

                    b.HasIndex("opicID");

                    b.HasIndex("shipmentID");

                    b.HasIndex("unitID");

                    b.ToTable("AirImps");
                });

            modelBuilder.Entity("Logistics.Entities.Carrier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cell");

                    b.Property<string>("Contact");

                    b.Property<Guid>("countryID");

                    b.Property<string>("fullName_EN")
                        .IsRequired();

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("countryID");

                    b.ToTable("Carriers");
                });

            modelBuilder.Entity("Logistics.Entities.Commodity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Commodities");
                });

            modelBuilder.Entity("Logistics.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("birthday");

                    b.Property<string>("cellPhone");

                    b.Property<string>("company_ext");

                    b.Property<string>("contactID")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("departmentID");

                    b.Property<string>("email");

                    b.Property<string>("englishName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("fieldInterested");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("homeAddress");

                    b.Property<string>("homePhone");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("marriageStatus");

                    b.Property<Guid>("positionID");

                    b.Property<string>("signature");

                    b.Property<DateTime>("spouseBirthday");

                    b.Property<string>("spouseName");

                    b.HasKey("Id");

                    b.HasIndex("contactID")
                        .IsUnique();

                    b.HasIndex("departmentID");

                    b.HasIndex("positionID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Logistics.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("_key")
                        .HasMaxLength(50);

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("_key")
                        .IsUnique()
                        .HasFilter("[_key] IS NOT NULL");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Logistics.Entities.Express", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CW");

                    b.Property<double>("GW");

                    b.Property<Guid?>("carrierID");

                    b.Property<Guid?>("commodityId");

                    b.Property<DateTime>("eta");

                    b.Property<DateTime>("etd");

                    b.Property<string>("flightNumber");

                    b.Property<string>("jobID")
                        .IsRequired();

                    b.Property<string>("mawbNumber");

                    b.Property<string>("notes");

                    b.Property<Guid?>("opicID");

                    b.Property<int>("quantity");

                    b.Property<string>("service");

                    b.Property<Guid?>("unitID");

                    b.HasKey("Id");

                    b.HasIndex("carrierID");

                    b.HasIndex("commodityId");

                    b.HasIndex("opicID");

                    b.HasIndex("unitID");

                    b.ToTable("Express");
                });

            modelBuilder.Entity("Logistics.Entities.FclExp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CBM");

                    b.Property<double>("GW");

                    b.Property<string>("Service");

                    b.Property<Guid?>("agentId");

                    b.Property<string>("bkgNumber");

                    b.Property<Guid?>("commodityId");

                    b.Property<DateTime>("created");

                    b.Property<DateTime>("eta");

                    b.Property<DateTime>("etd");

                    b.Property<Guid?>("freightId");

                    b.Property<bool>("isFinish");

                    b.Property<string>("jobID")
                        .IsRequired();

                    b.Property<string>("mBL");

                    b.Property<Guid?>("mBLNumberId");

                    b.Property<Guid?>("mMLNumberId");

                    b.Property<string>("notes");

                    b.Property<Guid?>("opicID");

                    b.Property<string>("poNumber");

                    b.Property<Guid?>("shipmentId");

                    b.Property<Guid?>("vesselId");

                    b.HasKey("Id");

                    b.HasIndex("agentId");

                    b.HasIndex("commodityId");

                    b.HasIndex("freightId");

                    b.HasIndex("mMLNumberId");

                    b.HasIndex("opicID");

                    b.HasIndex("shipmentId");

                    b.HasIndex("vesselId");

                    b.ToTable("FclExps");
                });

            modelBuilder.Entity("Logistics.Entities.Freight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Freights");
                });

            modelBuilder.Entity("Logistics.Entities.LclExp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CBM");

                    b.Property<double>("GW");

                    b.Property<Guid?>("agentId");

                    b.Property<string>("bkgNumber");

                    b.Property<Guid?>("commodityId");

                    b.Property<DateTime>("created");

                    b.Property<DateTime>("eta");

                    b.Property<DateTime>("etd");

                    b.Property<Guid?>("freightId");

                    b.Property<bool>("isFinish");

                    b.Property<string>("jobID")
                        .IsRequired();

                    b.Property<string>("mBL");

                    b.Property<Guid?>("mBLNumberId");

                    b.Property<Guid?>("mMLNumberId");

                    b.Property<string>("notes");

                    b.Property<Guid?>("opicID");

                    b.Property<int>("packages");

                    b.Property<Guid?>("shipmentId");

                    b.Property<Guid?>("unitID");

                    b.Property<Guid?>("vesselId");

                    b.HasKey("Id");

                    b.HasIndex("agentId");

                    b.HasIndex("commodityId");

                    b.HasIndex("freightId");

                    b.HasIndex("mMLNumberId");

                    b.HasIndex("opicID");

                    b.HasIndex("shipmentId");

                    b.HasIndex("unitID");

                    b.HasIndex("vesselId");

                    b.ToTable("LclExps");
                });

            modelBuilder.Entity("Logistics.Entities.MBLType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("MBLTypes");
                });

            modelBuilder.Entity("Logistics.Entities.Mode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Modes");
                });

            modelBuilder.Entity("Logistics.Entities.Nationality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("Logistics.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Logistics.Entities.Port", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("localZone")
                        .IsRequired();

                    b.Property<Guid>("modeID");

                    b.Property<Guid>("nationalityID");

                    b.Property<string>("portName")
                        .IsRequired();

                    b.Property<Guid>("zoneID");

                    b.HasKey("Id");

                    b.HasIndex("modeID");

                    b.HasIndex("nationalityID");

                    b.HasIndex("zoneID");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("Logistics.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Logistics.Entities.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("Logistics.Entities.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("Logistics.Entities.TypeOfBill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TypeOfBills");
                });

            modelBuilder.Entity("Logistics.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Logistics.Entities.Vessel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Vessels");
                });

            modelBuilder.Entity("Logistics.Entities.Zone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Logistics.Entities.AirExp", b =>
                {
                    b.HasOne("Logistics.Entities.Carrier", "carrier")
                        .WithMany()
                        .HasForeignKey("carrierID");

                    b.HasOne("Logistics.Entities.Commodity", "Commodity")
                        .WithMany()
                        .HasForeignKey("commodityId");

                    b.HasOne("Logistics.Entities.Contact", "opic")
                        .WithMany()
                        .HasForeignKey("opicID");

                    b.HasOne("Logistics.Entities.Payment", "payment")
                        .WithMany()
                        .HasForeignKey("paymentID");

                    b.HasOne("Logistics.Entities.Shipment", "shipment")
                        .WithMany()
                        .HasForeignKey("shipmentID");

                    b.HasOne("Logistics.Entities.TypeOfBill", "TypeOfBill")
                        .WithMany()
                        .HasForeignKey("typeOfBill");

                    b.HasOne("Logistics.Entities.Unit", "unit")
                        .WithMany()
                        .HasForeignKey("unitID");
                });

            modelBuilder.Entity("Logistics.Entities.AirImp", b =>
                {
                    b.HasOne("Logistics.Entities.Carrier", "agent")
                        .WithMany()
                        .HasForeignKey("agentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Logistics.Entities.Commodity", "Commodity")
                        .WithMany()
                        .HasForeignKey("commodityId");

                    b.HasOne("Logistics.Entities.Contact", "opic")
                        .WithMany()
                        .HasForeignKey("opicID");

                    b.HasOne("Logistics.Entities.Shipment", "shipment")
                        .WithMany()
                        .HasForeignKey("shipmentID");

                    b.HasOne("Logistics.Entities.Unit", "unit")
                        .WithMany()
                        .HasForeignKey("unitID");
                });

            modelBuilder.Entity("Logistics.Entities.Carrier", b =>
                {
                    b.HasOne("Logistics.Entities.Nationality", "country")
                        .WithMany()
                        .HasForeignKey("countryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Logistics.Entities.Contact", b =>
                {
                    b.HasOne("Logistics.Entities.Department", "department")
                        .WithMany()
                        .HasForeignKey("departmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Logistics.Entities.Position", "position")
                        .WithMany()
                        .HasForeignKey("positionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Logistics.Entities.Express", b =>
                {
                    b.HasOne("Logistics.Entities.Carrier", "carrier")
                        .WithMany()
                        .HasForeignKey("carrierID");

                    b.HasOne("Logistics.Entities.Commodity", "Commodity")
                        .WithMany()
                        .HasForeignKey("commodityId");

                    b.HasOne("Logistics.Entities.Contact", "opic")
                        .WithMany()
                        .HasForeignKey("opicID");

                    b.HasOne("Logistics.Entities.Unit", "unit")
                        .WithMany()
                        .HasForeignKey("unitID");
                });

            modelBuilder.Entity("Logistics.Entities.FclExp", b =>
                {
                    b.HasOne("Logistics.Entities.Carrier", "Agent")
                        .WithMany()
                        .HasForeignKey("agentId");

                    b.HasOne("Logistics.Entities.Commodity", "Commodity")
                        .WithMany()
                        .HasForeignKey("commodityId");

                    b.HasOne("Logistics.Entities.Freight", "Freight")
                        .WithMany()
                        .HasForeignKey("freightId");

                    b.HasOne("Logistics.Entities.MBLType", "MBLType")
                        .WithMany()
                        .HasForeignKey("mMLNumberId");

                    b.HasOne("Logistics.Entities.Contact", "opic")
                        .WithMany()
                        .HasForeignKey("opicID");

                    b.HasOne("Logistics.Entities.Shipment", "Shipment")
                        .WithMany()
                        .HasForeignKey("shipmentId");

                    b.HasOne("Logistics.Entities.Vessel", "Vessel")
                        .WithMany()
                        .HasForeignKey("vesselId");
                });

            modelBuilder.Entity("Logistics.Entities.LclExp", b =>
                {
                    b.HasOne("Logistics.Entities.Carrier", "Agent")
                        .WithMany()
                        .HasForeignKey("agentId");

                    b.HasOne("Logistics.Entities.Commodity", "Commodity")
                        .WithMany()
                        .HasForeignKey("commodityId");

                    b.HasOne("Logistics.Entities.Freight", "Freight")
                        .WithMany()
                        .HasForeignKey("freightId");

                    b.HasOne("Logistics.Entities.MBLType", "MBLType")
                        .WithMany()
                        .HasForeignKey("mMLNumberId");

                    b.HasOne("Logistics.Entities.Contact", "opic")
                        .WithMany()
                        .HasForeignKey("opicID");

                    b.HasOne("Logistics.Entities.Shipment", "Shipment")
                        .WithMany()
                        .HasForeignKey("shipmentId");

                    b.HasOne("Logistics.Entities.Unit", "unit")
                        .WithMany()
                        .HasForeignKey("unitID");

                    b.HasOne("Logistics.Entities.Vessel", "Vessel")
                        .WithMany()
                        .HasForeignKey("vesselId");
                });

            modelBuilder.Entity("Logistics.Entities.Port", b =>
                {
                    b.HasOne("Logistics.Entities.Mode", "mode")
                        .WithMany()
                        .HasForeignKey("modeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Logistics.Entities.Nationality", "nationality")
                        .WithMany()
                        .HasForeignKey("nationalityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Logistics.Entities.Zone", "zone")
                        .WithMany()
                        .HasForeignKey("zoneID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
